(defclass setzkasten/staff ()
  ((number-of-lines :initarg :number-of-lines
		    :initform 5
		    :accessor number-of-lines
		    :documentation "Number of staff lines.")
   (distance-between-lines :initarg :distance-between-lines
			   :initform 12
			   :accessor distance-between-lines
			   :documentation "The distance between two lines.")
   (thickness :initarg :thickness
		   :initform 1.2
		   :accessor thickness
		   :documentation "Thickness of the note lines.")
   (endings :initarg :endings
		 :initform 'rounded
		 :accessor endings
		 :documentation "Type of note line endings, left and right of type.")
   (offset :initarg :offset
		:initform 0.2
		:accessor offset
		:documentation "Gap between type left and right type edge and line endings."))
  "Parameters for the creation of staff lines.")

(defclass setzkasten/notehead ()
  ((length-over-line :initarg :length-over-line
		     :initform 0.25 
		     :accessor length-over-line
		     :documentation "If the notehead is located in a space: overhead distance that goes above the line, in fraction of line space.")
   (width :initarg :width
		   :initform .8
		   :accessor width
		   :documentation "Width (horizontally) of the notehead, as proportion to its height.")
   (bold-stroke :initarg :bold-stroke
			 :initform 3
			 :accessor bold-stroke
			 :documentation "Width of the bold lines in the note head.")
   (light-stroke :initarg :light-stroke
			  :initform 1
			  :accessor light-stroke
			  :documentation "Width of the light lines in the note head.")
   (black :initarg :black
	  :initform nil
	  :accessor black
	  :documentation "nil for normal notehead, T for black notation."))
  "Parameters for the creation of noteheads, oblique and square ones.")

(defclass setzkasten/stem ()
  ((stem-length :initarg :stem-length
		:initform 2.3
		:accessor stem-length
		:documentation "Length of note stem, in proportion to distance between lines.")
   (width-head :initarg :width-head
		    :initform 1.8
		    :accessor width-head
		    :documentation "Width of the note stem at note head.")
   (width-tail :initarg :width-tail
		    :initform 1.2
		    :accessor width-tail
		    :documentation "Width of the note stem at the end of the stem, in proportion to its width at the note head."))
  "Parameters for the creation of note stems.")

(defclass setzkasten/rest ()
  ((vertical-length :initarg :vertical-length
		    :initform 0.5
		    :accessor vertical-length
		    :documentation "Length of the vertical line, in proportion to the space between staff lines. Negative value for hanging rests, positive value for sitting rests.")
   (horizontal-length :initarg :horizontal-length
		      :initform 0
		      :accessor horizontal-length
		      :documentation "Length of the horizontal line, in proportion to the space between staff lines. 0 for no line. Negative value for pointing to the left (croma), positive value for pointing to the right (semiminima)."))
  "Parameters for the creation of rests.")

(defclass setzkasten/dot ()
  ((size :initarg :size
	     :initform 0.2
	     :accessor size
	     :documentation "Size of the dot, vertically, proportional to distance between staff lines."))
  "Parameters for the creation of dots.")

(defclass setzkasten/sharp ()
  ((thickness :initarg :thickness
	      :initform 0.5
	      :accessor thickness
	      :documentation "Stroke thickness.")
   (size :initarg :size
	 :initform 1
	 :accessor size
	 :documentation "Overall size of the sharp. Length of one side (they are always square-shaped) in proportion to the distance between two staff-lines.")
   (double-p :initarg :double-p
	     :initform t
	     :accessor double-p
	     :documentation "nil if only two lines are used, t if four lines are used."))
  "Parameters for the creation of sharps.")




(defclass setzkasten/type ()
  ((type-width :initarg :width
	       :initform 35
	       :accessor type-width
	       :documentation "Width of type.")
   (staff-instance :initarg :staff-instance
		   :initform nil
		   :accessor staff-instance
		   :documentation "Instance of setzkasten/staff. If nil, type won't be produced at all."))
  "Specification of a type containing only staff lines.")

(defclass setzkasten/type-notehead (setzkasten/type)
  ((notehead-position :initarg :notehead-position
		      :initform 5
		      :accessor notehead-position
		      :documentation "Vertical position of notehead, 0 for below bottom line, 10 for above top line.")
   (notehead-instance :initarg :notehead-instance
		      :initform nil
		      :accessor notehead-instance
		      :documentation "Instance of setzkasten/notehead.")
   (stem-instance :initarg :stem-instance
		  :initform nil
		  :accessor stem-instance
		  :documentation "Instance of setzkasten/stem. If nil, no stem will be generated.")
   (dot-instance :initarg :dot-instance
		 :initform nil
		 :accessor dot-instance
		 :documentation "Instance of setzkasten/dot. If nil, no dot will be generated."))
  "Specification of a type containing a notehead, an optional stem and an optional (enharmonic) dot above the notehead.")

(defclass setzkasten/type-rest (setzkasten/type)
  ((rest-position :initarg :rest-position
		  :initform 5
		  :accessor rest-position
		  :documentation "Position of the starting point of the rest. Needs to be a line (only 1 3 5 7 9 are valid positions).")
   (rest-instance :initarg :rest-instance
		  :initform nil
		  :accessor rest-instance
		  :documentation "Instance of setzkasten/rest. If nil, type won't be produced at all."))
  "Specification of a type containing a rest.")

(defclass setzkasten/type-sharp (setzkasten/type)
  ((sharp-position :initarg :sharp-position
		   :initform 5
		   :accessor sharp-position
		   :documentation "Position of the sharp within the staff.")
   (sharp-instance :initarg :sharp-instance
		   :initform nil
		   :accessor sharp-instance
		   :documentation "Instance of setzkasten/sharp. If nil, type won't be produced at all."))
  "Specification of a type containing a sharp.")


(cl-defgeneric cast (setzkasten/type)
  "Creates SVG files for any sort of type by calling the :around-method to create and close the SVG context and the applicable methods to generate the SVG paths of the types' components.")

(cl-defmethod cast :around ((type-generic setzkasten/type))
  "Main casting method, wrapping all other casting methods for the components of this type."
  (insert "\nOpening svg-context.")
  (let ((image nil))
    (cl-call-next-method image))
  (insert "\nclosing svg-context."))

(cl-defmethod cast ((type-blank setzkasten/type))
  (insert "\nCasting " (format "%d" (number-of-lines (staff-instance type-blank))) " lines."))

(cl-defmethod cast ((type-notehead setzkasten/type-notehead))
  (insert "\nCasting notehead.")
  ;(when (stem-instance type-notehead) (insert "\nCasting stem."))
  ;(when (dot-instance type-notehead) (insert "\nCasting dot."))
  (cl-call-next-method))

(cl-defmethod cast ((type-rest setzkasten/type-rest))
  (insert "\nCasting rest.")
  (cl-call-next-method))


(defun generate-kasten ()
  (let ((notehead-oblique (setzkasten/notehead))
	(notehead-square (setzkasten/notehead))
	(stem-minima (setzkasten/stem))
	(stem-longa (setzkasten/stem))
	(staff (setzkasten/staff))
	(rest-hanging (setzkasten/rest))
	(dot-enharmonic (setzkasten/dot)))
    (let ((blank-a (setzkasten/type :width 17
				    :staff-instance staff))
	  (blank-b (setzkasten/type :width 35
				    :staff-instance staff))
	  (minima-a (setzkasten/type-notehead :width 28
					      :staff-instance staff
					      :notehead-instance notehead-oblique
					      :notehead-position 0
					      :stem-instance stem-minima
					      :dot-instance dot-enharmonic))
	  (rest-minima-b (setzkasten/type-rest :width 18
					       :staff-instance staff
					       :rest-instance rest-hanging
					       :rest-position 3)))
;      (cast minima-a)
;      (insert "\n")
      (cast blank-b)
;      (insert "\n")
;      (cast rest-minima-b)
      )))

(generate-kasten)
Opening svg-context.
